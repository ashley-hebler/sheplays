---
import Card from "./Card.astro";

interface Game {
    name: string;
    date_formatted: string;
    networks: string[];
    sport: string;
    league: string;
    time_formatted: string;
    time: number;
    teams?: string[];
}

interface GameList {
    gameList: Game[];
    compact: boolean;
    showLeague: boolean;
}

const { title, gameList, compact, showLeague} = Astro.props;

// break out games by day
const gamesByDay = {};
gameList.forEach((game) => {
    const date = new Date(game.time);
    const day = date.getDate();
    const title = day;
    if (!gamesByDay[day]) {
        gamesByDay[day] = {
            title,
            gameList: [],
        };
    }
    gamesByDay[day].gameList.push(game);
});

---

<section>
    <!-- if not compact -->
    {!compact && (
        <section class="game-list">
            <ul role="list" class="link-card-grid">
                {
                    gameList.map((game) => (
                        <Card
                            name={game.name}
                            date={game.date_formatted}
                            networks={game.networks}
                            sport={game.sport}
                            league={game.league}
                            time={game.time_formatted}
                            ts={game.time}
                            showLeague={showLeague}
                            teams={game.teams}
                        />
                    ))
                }
            </ul>
        </section>
    )}
    <!-- if compact -->
    {compact && Object.keys(gamesByDay).map((day) => (
        <section class="game-list game-list--date">
            <h3 class="date-header">{gamesByDay[day].title}</h3>
            <ul role="list" class="link-card-grid">
                {
                    gamesByDay[day].gameList.map((game) => (
                        <Card
                            name={game.name}
                            date={game.date_formatted}
                            networks={game.networks}
                            sport={game.sport}
                            league={game.league}
                            time={game.time_formatted}
                            ts={game.time}
                            showLeague={showLeague}
                            teams={game.teams}
                        />
                    ))
                }
            </ul>
        </section>
    ))}
    <!-- if no games -->
    {gameList.length === 0 && <p class="none-banner">No games today, sadly</p>}
</section>
<style>
    .link-card-grid {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        /* grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr)); */
        gap: 1.75rem;
        padding: 1rem;
    }
    @media screen and (max-width: 600px) {
        .link-card-grid {
            grid-template-columns: 1fr;
        }
    } 
    .date-header {
        position: sticky;
        top: 0;
        background-color: #fff;
        padding: 1rem 1rem;
        z-index: 1;
        border-radius: 0.4rem;
    }
    .none-banner {
        font-size: 0.85rem;
        font-weight: 600;
        color: var(--color-text);
        width: 100%;
    }
    .game-list {
        margin-bottom: 2rem;
    }
</style>
