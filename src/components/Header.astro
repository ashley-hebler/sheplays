---
import Logo from "./Logo.astro";
import Spinner from "./Spinner.astro";

interface Props {
  sport: string;
  date?: string; // Optional date prop for the date input
}

const { sport, date } = Astro.props;

const currentDate = new Date();
// Format date to YYYY-MM-DD for the date input
let formattedDate = date || currentDate.toISOString().split('T')[0];

// If on a page /date/YYYY/MM/DD, set the date prop to that date
if (Astro.url.pathname.startsWith('/date/')) {
  const pathParts = Astro.url.pathname.split('/');
  if (pathParts.length >= 5 && pathParts[1] === 'date') {
    const year = pathParts[2];
    const month = pathParts[3];
    const day = pathParts[4];
    
    // Validate the date parts (YYYY/MM/DD)
    if (year && month && day && /^\d{4}$/.test(year) && /^\d{2}$/.test(month) && /^\d{2}$/.test(day)) {
      const dateFromPath = `${year}-${month}-${day}`;
      Astro.props.date = dateFromPath;
      // Update formattedDate to the date from the path
      formattedDate = dateFromPath;
    } else {
      console.warn(`Invalid date format in path: ${Astro.url.pathname}`);
    }
  }
} 

// Set date prop to the formatted date
Astro.props.date = formattedDate;

---

<div class="header">
  <div class="top-banner wrapper">
    <div class="logo-wrap">
      <Logo />
    </div>
    <Spinner sport={sport} />
    <nav>
      <ul class="navbar wrapper">
        <li>
          <button id="search-trigger" class="search-trigger" aria-label="Open search">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="11" cy="11" r="8"></circle>
              <path d="m21 21-4.35-4.35"></path>
            </svg>
          </button>
        </li>
        <li>
          <form method="POST" action="/api/navigate-date" class="date-form">
            <input 
              type="date" 
              name="date"
              id="date-picker" 
              class="date-picker"
              aria-label="Select date to view games"
              data-placeholder="Date Select"
              value={formattedDate}
            />
            <button type="submit" class="date-submit-btn" aria-label="Go to selected date">Go</button>
          </form>
        </li>
      </ul>
    </nav>
    
  </div>
</div>

<!-- Search Overlay -->
<div id="search-overlay" class="search-overlay hidden">
  <div class="search-container">
    <input 
      type="text" 
      id="search-input" 
      class="search-input" 
      placeholder="Search teams..."
      autocomplete="off"
    />
    <div id="search-results" class="search-results"></div>
  </div>
</div>

<style>
  .header {
    background-color: #011627ff;
    color: #fdfffcff;
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -2px rgba(0, 0, 0, 0.1);
    position: sticky;
    top: 0;
    z-index: 2;
  }
  .top-banner {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.5rem;
  }
  .logo-wrap {
    width: 150px;
  }
  @media screen and (min-width: 600px) {
    .logo-wrap {
      width: 200px;
    }
  }
  a {
    color: inherit;
    text-decoration: none;
  }
  .navbar {
    list-style: none;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin: 0 auto;
    gap: 0.5rem;
    flex-wrap: wrap;
    /* border-bottom: 2px solid #2ec4b6ff; */
  }
  @media screen and (min-width: 600px) {
    .navbar {
      justify-content: flex-start;
    }
  }
  .navbar__link {
    display: block;
    padding: 1rem 1rem 0.5rem 1rem;
    position: relative;
  }
  .navbar__link--active {
    color: #2ec4b6ff;
  }
  .navbar__link--active:after {
    content: "";
    position: absolute;
    top: 100%;
    margin-top: -2px;
    left: 0;
    width: 100%;
    height: 6px;
    background-color: #2ec4b6ff;
  }
  
  .date-picker {
    background-color: #011627ff;
    color: #fdfffcff;
    border: 2px solid #2ec4b6ff;
    border-radius: 4px;
    padding: 0.5rem;
    font-family: inherit;
    cursor: pointer;
    width: 18px;
  }

  /* on tablet and up make the date picker wider */
  @media screen and (min-width: 600px) {
    .date-picker {
      width: auto;
    }
  }
  
  .date-picker:focus {
    outline: 2px solid #2ec4b6ff;
    outline-offset: 2px;
  }
  
  .date-picker::-webkit-calendar-picker-indicator {
    filter: invert(1);
    cursor: pointer;
  }
  
  .date-picker:before {
    content: attr(data-placeholder);
    width: 100%;
  }
  
  .date-picker:focus:before,
  .date-picker:valid:before {
    display: none;
  }
  
  .date-form {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }
  
  .date-submit-btn {
    background-color: #2ec4b6ff;
    color: #011627ff;
    border: none;
    border-radius: 4px;
    padding: 0.5rem 0.75rem;
    font-family: inherit;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  
  .date-submit-btn:hover {
    background-color: #20a69a;
  }
  
  .date-submit-btn:focus {
    outline: 2px solid #2ec4b6ff;
    outline-offset: 2px;
  }

  .search-trigger {
    background: none;
    border: none;
    color: #fdfffcff;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 4px;
    transition: background-color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    -webkit-tap-highlight-color: transparent;
    touch-action: manipulation;
  }

  .search-trigger:hover {
    background-color: rgba(46, 196, 182, 0.1);
  }

  .search-trigger:focus {
    outline: 2px solid #2ec4b6ff;
    outline-offset: 2px;
  }

  .search-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(1, 22, 39, 0.95);
    backdrop-filter: blur(8px);
    z-index: 1000;
    display: flex;
    align-items: flex-start;
    justify-content: center;
    padding-top: 10vh;
    transition: opacity 0.2s ease, visibility 0.2s ease;
  }

  .search-overlay.hidden {
    opacity: 0;
    visibility: hidden;
  }

  .search-container {
    width: 95%;
    max-width: 600px;
    margin: 0 auto;
  }

  .search-input {
    width: 100%;
    background-color: #fdfffcff;
    color: #011627ff;
    border: none;
    border-radius: 8px;
    padding: 1.5rem 2rem;
    font-size: 1.5rem;
    font-family: inherit;
    outline: none;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    box-sizing: border-box;
  }

  @media screen and (max-width: 768px) {
    .search-container {
      width: 95%;
      padding: 0 1rem;
    }
    
    .search-input {
      font-size: 1.2rem;
      padding: 1.25rem 1.5rem;
    }

    .search-overlay {
      padding-top: 8vh;
    }
  }

  @media screen and (max-width: 480px) {
    .search-container {
      width: 95%;
      padding: 0 0.5rem;
    }
    
    .search-input {
      font-size: 1.1rem;
      padding: 1rem 1.25rem;
    }

    .search-overlay {
      padding-top: 6vh;
    }

    .search-result-item {
      padding: 1.25rem 1.5rem;
    }

    .search-result-team {
      font-size: 1rem;
      line-height: 1.3;
    }
  }

  .search-input::placeholder {
    color: #666;
  }

  .search-results {
    background-color: #fdfffcff;
    border-radius: 8px;
    margin-top: 0.5rem;
    max-height: 60vh;
    overflow-y: auto;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
  }

  .search-result-item {
    padding: 1.5rem 2rem;
    border-bottom: 1px solid #eee;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .search-result-item:last-child {
    border-bottom: none;
  }

  .search-result-item:hover,
  .search-result-item.highlighted {
    background-color: #f5f5f5;
  }

  .search-result-team {
    font-weight: bold;
    color: #011627ff;
    font-size: 1.1rem;
    line-height: 1.4;
  }

  .search-result-league {
    color: #666;
    font-size: 0.9rem;
    margin-top: 0.25rem;
  }
</style>

<script>
  let currentHighlightIndex = -1;
  let searchCache = new Map();
  let searchTimeout;

  // API search function
  async function performSearch(query) {
    if (query.length < 2) return [];
    
    const cacheKey = `search_${query}`;
    if (searchCache.has(cacheKey)) {
      return searchCache.get(cacheKey);
    }

    try {
      const response = await fetch(`/api/search?q=${encodeURIComponent(query)}`);
      const data = await response.json();
      
      if (data.error) {
        throw new Error(data.error);
      }
      
      searchCache.set(cacheKey, data.results);
      return data.results;
    } catch (error) {
      console.error('Search error:', error);
      return [];
    }
  }

  function initSearch() {
    const searchTrigger = document.getElementById('search-trigger');
    const searchOverlay = document.getElementById('search-overlay');
    const searchInput = document.getElementById('search-input');
    const searchResults = document.getElementById('search-results');

    if (!searchTrigger || !searchOverlay || !searchInput || !searchResults) {
      return;
    }

    // Open search overlay - handle both click and touch events for iOS
    const openSearch = () => {
      searchOverlay.classList.remove('hidden');
      searchInput.focus();
      searchInput.value = '';
      searchResults.innerHTML = '';
      currentHighlightIndex = -1;
    };

    searchTrigger.addEventListener('click', openSearch);
    searchTrigger.addEventListener('touchend', (e) => {
      e.preventDefault();
      openSearch();
    });

    // Close search overlay on ESC or click outside
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !searchOverlay.classList.contains('hidden')) {
        closeSearch();
      }
    });

    searchOverlay.addEventListener('click', (e) => {
      if (e.target === searchOverlay) {
        closeSearch();
      }
    });

    // Handle search input
    searchInput.addEventListener('input', async (e) => {
      const query = e.target.value.trim();
      
      // Clear timeout if user is still typing
      if (searchTimeout) {
        clearTimeout(searchTimeout);
      }
      
      if (query === '') {
        searchResults.innerHTML = '';
        currentHighlightIndex = -1;
        return;
      }

      if (query.length < 2) {
        searchResults.innerHTML = '<div class="search-result-item">Type at least 2 characters to search...</div>';
        return;
      }

      // Show loading state
      searchResults.innerHTML = '<div class="search-result-item">Searching...</div>';
      
      // Debounce search requests
      searchTimeout = setTimeout(async () => {
        try {
          const results = await performSearch(query);
          renderSearchResults(results);
        } catch (error) {
          console.error('Search error:', error);
          searchResults.innerHTML = '<div class="search-result-item">Error searching. Please try again.</div>';
        }
      }, 300);
    });

    // Handle keyboard navigation
    searchInput.addEventListener('keydown', (e) => {
      const items = searchResults.querySelectorAll('.search-result-item');
      
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        currentHighlightIndex = Math.min(currentHighlightIndex + 1, items.length - 1);
        updateHighlight(items);
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        currentHighlightIndex = Math.max(currentHighlightIndex - 1, -1);
        updateHighlight(items);
      } else if (e.key === 'Enter' && currentHighlightIndex >= 0) {
        e.preventDefault();
        items[currentHighlightIndex].click();
      }
    });

    function renderSearchResults(results) {
      currentHighlightIndex = -1;
      
      if (results.length === 0) {
        searchResults.innerHTML = '<div class="search-result-item">No results found</div>';
        return;
      }

      searchResults.innerHTML = results.map(result => {
        let displayText = result.name;
        if (result.type === 'team') {
          displayText += ` (${result.league}, ${result.sport})`;
        }
        return `
          <div class="search-result-item" data-type="${result.type}" data-id="${result.id}" data-name="${result.name}">
            <div class="search-result-team">${displayText}</div>
          </div>
        `;
      }).join('');

      // Add click handlers to results
      searchResults.querySelectorAll('.search-result-item').forEach(item => {
        item.addEventListener('click', () => {
          const type = item.dataset.type;
          const id = item.dataset.id;
          const name = item.dataset.name;
          
          console.log(`Selected ${type}:`, name, `ID: ${id}`);
          
          // Navigate based on type
          if (type === 'sport') {
            // Navigate to sport page (e.g., /basketball)
            window.location.href = `/${name.toLowerCase()}`;
          } else if (type === 'team') {
            // Navigate to team page (e.g., /teams/123)
            window.location.href = `/teams/${id}`;
          }
          
          closeSearch();
        });
      });
    }

    function updateHighlight(items) {
      items.forEach((item, index) => {
        item.classList.toggle('highlighted', index === currentHighlightIndex);
      });
    }

    function closeSearch() {
      searchOverlay.classList.add('hidden');
      searchInput.value = '';
      searchResults.innerHTML = '';
      currentHighlightIndex = -1;
    }
  }

  // Initialize when DOM is loaded and on page navigation
  function setupSearch() {
    initSearch();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupSearch);
  } else {
    setupSearch();
  }

  // Re-initialize after client-side navigation (Astro's View Transitions)
  document.addEventListener('astro:page-load', setupSearch);
</script>

