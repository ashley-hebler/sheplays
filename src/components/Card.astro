---
import SportBadge from "./SportBadge.astro";
import Live from "./Live.astro";
import { countryCodes } from "../config";
import type { Network, WatchLink, Sport, League, Team } from "../types";

interface Props {
  day: string;
  name: string;
  date: string;
  networks: Network[];
  watchLinks: WatchLink[];
  sport: Sport;
  league: League;
  time: string;
  ts: string;
  showLeague?: boolean;
  teams?: Team[];
}

const {
  name,
  date,
  networks,
  sport,
  league,
  time,
  ts,
  showLeague,
  teams,
  day,
  watchLinks,
} = Astro.props;

// abbreviate some network names
const abbreviations = {
  "WNBA League Pass": "League Pass",
  "Bally Sports Southwest Extra": "Bally SW",
  "Amazon Prime Video": "Prime"
}

const getAbbreviation = (name: string) => {
  return abbreviations[name] || name;
}


let defaultTime = 120;

if (sport.name === "soccer") {
  defaultTime = 120;
}

// ts is greater than now and less than one hour ago
const estimatedEnd = new Date(ts).getTime() + 1000 * 60 * defaultTime;
const isOn = new Date(ts).getTime() <= Date.now() && estimatedEnd >= Date.now();

function getFlagEmoji(country: string) {
  const countryCode = countryCodes[country];
  if (!countryCode) {
    return "";
  }
  const codePoints = countryCode
    .toUpperCase()
    .split("")
    .map((char) => 127397 + char.charCodeAt());
  return String.fromCodePoint(...codePoints);
}

const international = ["FIFA", "US Soccer"];

const teamPath = (team: Team) => {
  return `/teams/${team.id}`;
};

const teamName = (team: Team) => {
  return team.name;
};

const cardClass = (sport: Sport, showLeague, day) => {
  const classes = [sport.name, "link-card"];
  if (showLeague) {
    classes.push("link-card--4-col");
  }
  if (day) {
    classes.push("link-card--stacked");
  }
  return classes.join(" ");
};

// combine watch links and networks
const networkLinks = networks.map((network) => ({
  label: network.name,
  url: `/networks/${network.id}`,
  play: false,
}));

// add play key to watchLinks
const newWatchLinks = watchLinks.map((link) => ({
  ...link,
  play: true,
}));

const allLinks = [...newWatchLinks, ...networkLinks];


// if two labels match, remove the last one
const uniqueLinks = allLinks.filter((link, index, self) => {
  return (
    index ===
    self.findIndex((t) => t.label === link.label)
  );
});


// play svg
const play = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 53"><path fill="#2EC4B6" d="M31.802 12.622c7.791 5.72 11.687 8.58 11.687 13.47 0 4.893-3.896 7.753-11.687 13.473-2.15 1.579-4.284 3.066-6.244 4.305-1.72 1.087-3.667 2.21-5.684 3.314-7.772 4.254-11.659 6.382-15.145 4.026C1.243 48.855.927 43.925.294 34.066.114 31.276 0 28.543 0 26.093s.114-5.183.294-7.972C.927 8.26 1.243 3.33 4.729.976 8.215-1.38 12.102.748 19.874 5.002c2.017 1.104 3.964 2.228 5.684 3.315 1.96 1.239 4.094 2.726 6.244 4.305Z"/></svg>';


---

{
  day && (
    <p class="date">
      <span class="date__inner">
        {day} at <span class="time">{time}</span>
      </span>
    </p>
  )
}
<li class={cardClass(sport, showLeague, day)}>
  <!-- if show league -->
  {
    showLeague && (
      <div class="kicker link-card__item">
        <SportBadge sport={sport.name} />
        <span class="league-label">{league.name}</span>
      </div>
    )
  }
  <!-- team 0 -->
  {
    teams && teams[0] && (
      <h2 class="link-card__item">
        <a class="link-card__team" href={teamPath(teams[0])}>
          {teams[0].rank && (
            <span class="link-card__rank">{teams[0].rank}</span>
          )}
          <span>{teamName(teams[0])}</span>
        </a>
      </h2>
    )
  }

  <!-- team 1 -->
  {
    teams && teams[1] && (
      <h2 class="link-card__item">
        <a class="link-card__team" href={teamPath(teams[1])}>
          {teams[1].rank && (
            <span class="link-card__rank">{teams[1].rank}</span>
          )}
          <span>{teamName(teams[1])}</span>
        </a>
      </h2>
    )
  }

  <p class="networks link-card__item">
    {
      uniqueLinks.map((network, index) => (
        <>
          <a class="networks__link" href={network.url}>
            <span>{getAbbreviation(network.label)}</span>
            {network.play && "play" && <span class="networks__icon" set:html={play}></span>}
          </a>
        </>
      ))
    }
  </p>
</li>
<style>
  .link-card {
    list-style: none;
    background-color: #fff;
    display: grid;
    align-items: center;
    grid-template-columns: 1fr 1fr 1fr;
  }

  .link-card--4-col {
    grid-template-columns: 1fr 2fr 2fr 1fr;
  }

  .link-card__item {
    display: flex;
    align-items: center;
    padding: 0.5rem;
  }

  h2 {
    margin: 0;
    font-size: 1rem;
  }
  .kicker {
    display: flex;
    align-items: center;
    flex-direction: column;
    justify-content: center;
    background-color: #f4f3f7;
    height: 100%;
    padding: 0;
  }
  .league-label {
    font-size: 0.55rem;
    color: #444;
    font-weight: 900;
    letter-spacing: 0.05em;
  }
  .networks {
    font-size: 0.85rem;
  }
  .link-card__team {
    text-decoration: none;
    color: #011627ff;
    font-weight: 900;
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }
  .link-card__team:hover {
    text-decoration: underline;
  }
  .link-card__rank {
    display: inline-flex;
    flex-shrink: 0;
    align-items: center;
    justify-content: center;
    width: 1rem;
    text-align: center;
    height: 1rem;
    border-radius: 50%;
    background-color: #011627ff;
    color: #fff;
    font-size: 0.6rem;
  }
  .date {
    margin: 0;
    padding: 0.5rem 1rem 0.5rem 0.5rem;
    background-color: #011627ff;
    color: #fff;
    border-radius: 0rem 0.4rem 0 0;
    display: inline-block;
  }

  .networks {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  .networks__link {
    color: #011627ff;
    text-decoration: none;
    display: inline-flex;
    border: 1px solid #011627ff;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: .85rem;
    align-items: center;
    justify-content: center;
  }

  .networks__icon {
    width: .5rem;
    margin-left: .25rem;
  }
  .networks__icon svg {
    width: 100%;
  }
</style>
