---
import SportBadge from "./SportBadge.astro";
import Live from "./Live.astro";
import { countryCodes } from "../config";
interface Network {
  id: number;
  name: string;
}

interface Sport {
  id: number;
  name: string;
}

interface League {
  id: number;
  name: string;
  sport: Sport;
}

interface Team {
  id: number;
  name: string;
}

interface Props {
  day: string;
  name: string;
  date: string;
  networks: Network[];
  sport: Sport;
  league: League;
  time: string;
  ts: string;
  showLeague?: boolean;
  teams?: Team[];
}

const {
  name,
  date,
  networks,
  sport,
  league,
  time,
  ts,
  showLeague,
  teams,
  day,
} = Astro.props;

let defaultTime = 120;

if (sport.name === "soccer") {
  defaultTime = 120;
}

// ts is greater than now and less than one hour ago
const estimatedEnd = new Date(ts).getTime() + 1000 * 60 * defaultTime;
const isOn = new Date(ts).getTime() <= Date.now() && estimatedEnd >= Date.now();

function getFlagEmoji(country: string) {
  const countryCode = countryCodes[country];
  if (!countryCode) {
    return "";
  }
  const codePoints = countryCode
    .toUpperCase()
    .split("")
    .map((char) => 127397 + char.charCodeAt());
  return String.fromCodePoint(...codePoints);
}

const international = ["FIFA", "US Soccer"];

const teamPath = (team: Team) => {
  return `/teams/${team.id}`;
};

const teamName = (team: Team) => {
  return team.name;
};

const cardClass = (sport: Sport, showLeague, day) => {
  const classes = [sport.name, "link-card"];
  if (showLeague) {
    classes.push("link-card--4-col");
  }
  if (day) {
    classes.push("link-card--stacked");
  }
  return classes.join(" ");
};
---
{
  day && (
    <p class="date">
      <span class="date__inner">
        {day} at <span class="time">{time}</span>
      </span>
    </p>
  )
}
<li class={cardClass(sport, showLeague, day)}>
  <!-- if show league -->
  {
    showLeague && (
      <div class="kicker link-card__item">
        <SportBadge sport={sport.name} />
        <span class="league-label">{league.name}</span>
      </div>
    )
  }
  {
    teams && (
      <>
        <h2 class="link-card__item">
          <a class="link-card__team" href={teamPath(teams[0])}>
            {teamName(teams[0])}
          </a>
        </h2>
        <h2 class="link-card__item">
          <a class="link-card__team" href={teamPath(teams[1])}>
            {teamName(teams[1])}
          </a>
        </h2>
      </>
    )
  }

  <p class="networks link-card__item">
    {
      networks.map((network, index) => (
        <>
          <span>{network.name}</span>
          {index !== networks.length - 1 && <span>, </span>}
        </>
      ))
    }
  </p>
</li>
<style>
  .link-card {
    list-style: none;
    background-color: #fff;
    display: grid;
    align-items: center;
    grid-template-columns: 1fr 1fr 1fr;
  }

  .link-card--4-col {
    grid-template-columns: 1fr 2fr 2fr 1fr;
  }


  .link-card__item {
    display: flex;
    align-items: center;
    padding: 0.5rem;
  }


  h2 {
    margin: 0;
    font-size: 1rem;
  }
  .kicker {
    display: flex;
    align-items: center;
    flex-direction: column;
    justify-content: center;
    background-color: #f4f3f7;
    height: 100%;
    padding: 0;
  }
  .league-label {
    font-size: 0.55rem;
    color: #444;
    font-weight: 900;
    letter-spacing: 0.05em;
  }
  .networks {
    font-size: 0.85rem;
  }
  .link-card__team {
    text-decoration: none;
    color: #011627ff;
    font-weight: 900;
  }
  .link-card__team:hover {
    text-decoration: underline;
  }
  .date {
    margin: 0;
    padding: 0.5rem 1rem .5rem .5rem;
    background-color: #011627ff;
    color: #fff;
    border-radius: 0rem 0.4rem 0 0;
    display: inline-block;
  }

</style>
